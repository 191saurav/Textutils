{"version":3,"sources":["components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","Mode","href","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","onClick","toggleMode","role","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","newText","toUpperCase","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","App","setMode","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.b63de759.chunk.js","sourcesContent":["import React from 'react' //rfc\r\n\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.Mode} bg-${props.Mode}`}>\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">TextUtils</a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n            </li>\r\n             {/* <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"/\">About</a>\r\n             </li>  */}\r\n\r\n          </ul>\r\n          {/* <form className=\"d-flex\" role=\"search\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-outline-primary\" type=\"submit\">Search</button>\r\n        </form> */}\r\n          <div className={`form-check form-switch text-${props.Mode==='light'?'dark':'light'}`}>\r\n            <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  )\r\n}\r\n\r\n\r\n","import React, { useState } from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = ()=>{\r\n        console.log(\"uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n    }\r\n    const handleLoClick = ()=>{\r\n        console.log(\"Lowercase was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n    }\r\n    const handleclrClick = ()=>{\r\n        console.log(\"tOGGLE was clicked\" + text);\r\n        let newText = \" \";\r\n        setText(newText);\r\n    }\r\n    const handleonchange = (event)=>{\r\n        console.log(\"on change\");\r\n        setText(event.target.value);\r\n    }\r\n    const handleCopy = () => {\r\n        var text =document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n    }\r\n    const handleExtraspaces = ()=>{\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"))\r\n    }\r\n    const [text, setText] = useState('Enter text here');\r\n    //text= \"new text\"; //wrong way to change the text\r\n    //setText(\"new text\");//right way to change the text\r\n    return (\r\n        <>\r\n        <div className='container' style={{color:props.Mode==='dark'?'white':'black'}}>\r\n            <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n\r\n                <textarea className=\"form-control\" value={text} onChange={handleonchange} style={{backgroundColor:props.Mode==='dark'?'grey':'white', color:props.Mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n            </div>\r\n            <button className='btn btn-primary mx-2' onClick={handleUpClick}>Convert to Uppercase</button>\r\n            <button className='btn btn-primary mx-2' onClick={handleLoClick}>Convert to Lowercase</button>\r\n            <button className='btn btn-primary mx-2' onClick={handleclrClick}>Clear</button>\r\n            <button className='btn btn-primary mx-2' onClick={handleCopy}>Copy Text</button>\r\n            <button className='btn btn-primary mx-2' onClick={handleExtraspaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-3\" style={{color:props.Mode==='dark'?'white':'black'}}>\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text.split(\" \").length} words and {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes to Read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0?text:\"Enter something to Preview It Here\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\n\n\nfunction App() {\n  const [Mode, setMode] = useState('light');//whether dark mode is enabled or not.\n  const toggleMode = () => {\n    if (Mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#343a40';\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n    }\n  }\n\n  return (\n    <>\n      {/* <Router> */}\n      <Navbar Mode={Mode} toggleMode={toggleMode} />\n\n      <div className=\"container my-3\" >\n        {/* <Switch> */}\n        {/* <Route path=\"/about\"> */}\n        {/* <About /> */}\n        {/* </Route> */}\n        {/* <Route path=\"/\"> */}\n        <TextForm heading=\"Enter the Text to Analyze Below\" Mode={Mode} />\n\n        {/* </Route> */}\n        {/* </Switch> */}\n\n\n      </div>\n      {/* </Router> */}\n    </>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}